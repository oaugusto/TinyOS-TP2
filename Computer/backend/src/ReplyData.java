/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'ReplyData'
 * message type.
 */

public class ReplyData extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 28;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 4;

    /** Create a new ReplyData of size 28. */
    public ReplyData() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new ReplyData of the given data_length. */
    public ReplyData(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReplyData with the given data_length
     * and base offset.
     */
    public ReplyData(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReplyData using the given byte array
     * as backing store.
     */
    public ReplyData(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReplyData using the given byte array
     * as backing store, with the given base offset.
     */
    public ReplyData(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReplyData using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public ReplyData(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReplyData embedded in the given message
     * at the given base offset.
     */
    public ReplyData(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new ReplyData embedded in the given message
     * at the given base offset and length.
     */
    public ReplyData(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <ReplyData> \n";
      try {
        s += "  [seqno=0x"+Long.toHexString(get_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data_luminosity=0x"+Long.toHexString(get_data_luminosity())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data_temperature=0x"+Long.toHexString(get_data_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [origem=0x"+Long.toHexString(get_origem())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [extra=";
        for (int i = 0; i < 10; i++) {
          s += "0x"+Long.toHexString(getElement_extra(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqno
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqno' is signed (false).
     */
    public static boolean isSigned_seqno() {
        return false;
    }

    /**
     * Return whether the field 'seqno' is an array (false).
     */
    public static boolean isArray_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqno'
     */
    public static int offset_seqno() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqno'
     */
    public static int offsetBits_seqno() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'seqno'
     */
    public int get_seqno() {
        return (int)getUIntBEElement(offsetBits_seqno(), 16);
    }

    /**
     * Set the value of the field 'seqno'
     */
    public void set_seqno(int value) {
        setUIntBEElement(offsetBits_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqno'
     */
    public static int size_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqno'
     */
    public static int sizeBits_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data_luminosity
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data_luminosity' is signed (false).
     */
    public static boolean isSigned_data_luminosity() {
        return false;
    }

    /**
     * Return whether the field 'data_luminosity' is an array (false).
     */
    public static boolean isArray_data_luminosity() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data_luminosity'
     */
    public static int offset_data_luminosity() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data_luminosity'
     */
    public static int offsetBits_data_luminosity() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'data_luminosity'
     */
    public int get_data_luminosity() {
        return (int)getUIntBEElement(offsetBits_data_luminosity(), 16);
    }

    /**
     * Set the value of the field 'data_luminosity'
     */
    public void set_data_luminosity(int value) {
        setUIntBEElement(offsetBits_data_luminosity(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data_luminosity'
     */
    public static int size_data_luminosity() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data_luminosity'
     */
    public static int sizeBits_data_luminosity() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data_temperature
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data_temperature' is signed (false).
     */
    public static boolean isSigned_data_temperature() {
        return false;
    }

    /**
     * Return whether the field 'data_temperature' is an array (false).
     */
    public static boolean isArray_data_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data_temperature'
     */
    public static int offset_data_temperature() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data_temperature'
     */
    public static int offsetBits_data_temperature() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'data_temperature'
     */
    public int get_data_temperature() {
        return (int)getUIntBEElement(offsetBits_data_temperature(), 16);
    }

    /**
     * Set the value of the field 'data_temperature'
     */
    public void set_data_temperature(int value) {
        setUIntBEElement(offsetBits_data_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data_temperature'
     */
    public static int size_data_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data_temperature'
     */
    public static int sizeBits_data_temperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: origem
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'origem' is signed (false).
     */
    public static boolean isSigned_origem() {
        return false;
    }

    /**
     * Return whether the field 'origem' is an array (false).
     */
    public static boolean isArray_origem() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'origem'
     */
    public static int offset_origem() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'origem'
     */
    public static int offsetBits_origem() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'origem'
     */
    public int get_origem() {
        return (int)getUIntBEElement(offsetBits_origem(), 16);
    }

    /**
     * Set the value of the field 'origem'
     */
    public void set_origem(int value) {
        setUIntBEElement(offsetBits_origem(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'origem'
     */
    public static int size_origem() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'origem'
     */
    public static int sizeBits_origem() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: extra
    //   Field type: int[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'extra' is signed (false).
     */
    public static boolean isSigned_extra() {
        return false;
    }

    /**
     * Return whether the field 'extra' is an array (true).
     */
    public static boolean isArray_extra() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'extra'
     */
    public static int offset_extra(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'extra'
     */
    public static int offsetBits_extra(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'extra' as a int[]
     */
    public int[] get_extra() {
        int[] tmp = new int[10];
        for (int index0 = 0; index0 < numElements_extra(0); index0++) {
            tmp[index0] = getElement_extra(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'extra' from the given int[]
     */
    public void set_extra(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_extra(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'extra'
     */
    public int getElement_extra(int index1) {
        return (int)getUIntBEElement(offsetBits_extra(index1), 16);
    }

    /**
     * Set an element of the array 'extra'
     */
    public void setElement_extra(int index1, int value) {
        setUIntBEElement(offsetBits_extra(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'extra'
     */
    public static int totalSize_extra() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'extra'
     */
    public static int totalSizeBits_extra() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'extra'
     */
    public static int elementSize_extra() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'extra'
     */
    public static int elementSizeBits_extra() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'extra'
     */
    public static int numDimensions_extra() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'extra'
     */
    public static int numElements_extra() {
        return 10;
    }

    /**
     * Return the number of elements in the array 'extra'
     * for the given dimension.
     */
    public static int numElements_extra(int dimension) {
      int array_dims[] = { 10,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
